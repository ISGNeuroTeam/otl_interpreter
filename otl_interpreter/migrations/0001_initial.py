# Generated by Django 3.2.9 on 2022-04-12 07:10

from django.db import migrations, models
import django.db.models.deletion
import mptt.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ComputingNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(db_index=True, max_length=255)),
                ('uuid', models.UUIDField(unique=True)),
                ('host_id', models.CharField(max_length=255)),
                ('active', models.BooleanField(default=True)),
                ('resources', models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='OtlJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='Creation date')),
                ('modified_time', models.DateTimeField(auto_now=True, verbose_name='Modification date')),
                ('query', models.TextField()),
                ('query_hash', models.BinaryField(db_index=True, max_length=255)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('tws', models.DateTimeField()),
                ('twf', models.DateTimeField()),
                ('ttl', models.DurationField(default=60, verbose_name='ttl')),
                ('user_guid', models.UUIDField()),
                ('status', models.CharField(choices=[('NEW', 'New'), ('TRANSLATED', 'Translated'), ('PLANNED', 'Planned'), ('RUNNING', 'Running'), ('FINISHED', 'Finished'), ('CANCELED', 'Canceled'), ('FAILED', 'Failed')], default='NEW', max_length=255)),
                ('status_text', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='NodeJobResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('storage', models.CharField(choices=[('interproc_storage', 'Interprocessing storage'), ('local_post_processing', 'Local post processing storage'), ('shared_post_processing', 'Shared post processing storage')], max_length=255, verbose_name='Result storage')),
                ('path', models.CharField(max_length=255, verbose_name='path')),
                ('was_read', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('CALCULATING', 'Result is calculating'), ('CALCULATED', 'Result is calculated'), ('NOT_EXIST', 'Result is not exist')], db_index=True, default='NOT_EXIST', max_length=255, verbose_name='Result status')),
                ('ttl', models.DurationField(default=60)),
                ('last_touched_timestamp', models.DateTimeField(null=True, verbose_name='Last touched')),
                ('finish_timestamp', models.DateTimeField(null=True, verbose_name='Finish timestamp')),
            ],
            options={
                'unique_together': {('storage', 'path')},
            },
        ),
        migrations.CreateModel(
            name='NodeJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='Creation date')),
                ('modified_time', models.DateTimeField(auto_now=True, verbose_name='Modification date')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('computing_node_type', models.CharField(max_length=255, verbose_name='Node type')),
                ('commands', models.JSONField()),
                ('status', models.CharField(choices=[('PLANNED', 'Planned'), ('READY_TO_EXECUTE', 'Ready to execute'), ('IN_QUEUE', 'In queue'), ('TAKEN_FROM_QUEUE', 'Taken from queue'), ('SENT_TO_COMPUTING_NODE', 'Sent to computing node'), ('DECLINED_BY_COMPUTING_NODE', 'Declined by computing node'), ('RUNNING', 'Running'), ('WAITING_SAME_RESULT', 'Waiting the same result from other node job'), ('FINISHED', 'Finished'), ('CANCELED', 'Canceled'), ('FAILED', 'Failed')], default='PLANNED', max_length=255)),
                ('status_text', models.TextField(null=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('computing_node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='otl_interpreter.computingnode')),
                ('next_job', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='awaited_jobs', to='otl_interpreter.nodejob')),
                ('otl_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nodejobs', to='otl_interpreter.otljob')),
                ('result', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='otl_interpreter.nodejobresult')),
            ],
        ),
        migrations.CreateModel(
            name='NodeCommand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('syntax', models.JSONField()),
                ('resource_necessity', models.JSONField(null=True)),
                ('active', models.BooleanField(default=True)),
                ('node', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='node_commands', to='otl_interpreter.computingnode')),
            ],
            options={
                'unique_together': {('node', 'name')},
            },
        ),
    ]
